---
// FindingsSection.astro - Displays the findings section with collapsible cards
---
<section id="findings" class="content-section">
  <div class="section-container">
    <h2 class="section-title">Key Findings</h2>
    
    <div class="findings-components">
      <div class="finding-card" id="finding-card-1">
        <div class="finding-header">
          <h3 class="finding-title">Finding 1: Dynamic decomposition cuts inference error</h3>
          <div class="expand-icon">-</div>
        </div>
        <div class="finding-content active" id="finding-content-1">
          <p>Across APPS, MATH500, and LiveCodeBench, DISC lowers pass@10 error by 5.0%, 6.7%, and 10.5% relative to the best static baseline. The gains compound on the hardest competition problems where sampling budget is scarce.</p>
        </div>
      </div>
      
      <div class="finding-card" id="finding-card-2">
        <div class="finding-header">
          <h3 class="finding-title">Finding 2: Compute concentrates on pivotal tokens</h3>
          <div class="expand-icon">-</div>
        </div>
        <div class="finding-content active" id="finding-content-2">
          <p>DISC repeatedly splits critical prefixes such as connective words and control tokens. These pivots steer the downstream reasoning, so the algorithm allocates more sampling budget there instead of overspending on settled regions.</p>
        </div>
      </div>
      
      <div class="finding-card" id="finding-card-3">
        <div class="finding-header">
          <h3 class="finding-title">Finding 3: Works across model families</h3>
          <div class="expand-icon">-</div>
        </div>
        <div class="finding-content active" id="finding-content-3">
          <p>From lightweight LLaMA and Mistral checkpoints to proprietary reasoning models such as R1, DISC consistently boosts accuracy. For LLaMA the pass@10 rate jumps from 0.01 to 0.04â€”a threefold relative lift.</p>
        </div>
      </div>
      
      <div class="finding-card" id="finding-card-4">
        <div class="finding-header">
          <h3 class="finding-title">Finding 4: Plug-and-play with search algorithms</h3>
          <div class="expand-icon">-</div>
        </div>
        <div class="finding-content active" id="finding-content-4">
          <p>The same decomposition operator drives greedy search, beam search, or MCTS. DISC expands nodes until rewards plateau, then contracts, providing precise control over inference-time compute without new hyperparameters.</p>
        </div>
      </div>
      
      <div class="finding-card" id="finding-card-5">
        <div class="finding-header">
          <h3 class="finding-title">Finding 5: Token efficiency improves with adaptive budgets</h3>
          <div class="expand-icon">-</div>
        </div>
        <div class="finding-content active" id="finding-content-5">
          <p>Under the same token budget, DISC recovers higher accuracy than sentence-level or token-level decomposition. When the sample budget is fixed, DISC returns better solutions with fewer tokens.</p>
        </div>
      </div>
      
      <div class="finding-card" id="finding-card-6">
        <div class="finding-header">
          <h3 class="finding-title">Finding 6: Minimal assumptions enable fast deployment</h3>
          <div class="expand-icon">-</div>
        </div>
        <div class="finding-content active" id="finding-content-6">
          DISC only needs scalar rewards to drive decomposition. Unit tests, verifiers, or self-critique models can play that role, avoiding handcrafted heuristics or process reward models.
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .findings-components {
    margin-bottom: 3rem;
  }

  .finding-card {
    background-color: #fff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    margin-bottom: 1.5rem;
    transition: all 0.3s ease;
  }

  .finding-card:hover {
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
    transform: translateY(-5px);
  }

  .finding-header {
    padding: 1.2rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    color: white;
  }

  /* Different background colors for each finding card */
  .finding-card:nth-child(1) .finding-header { background-color: #2a2f6c; }
  .finding-card:nth-child(2) .finding-header { background-color: #4a3f9f; }
  .finding-card:nth-child(3) .finding-header { background-color: #5e56b2; }
  .finding-card:nth-child(4) .finding-header { background-color: #7165d8; }
  .finding-card:nth-child(5) .finding-header { background-color: #9f7cd2; }
  .finding-card:nth-child(6) .finding-header { background-color: #2a2f6c; }

  .finding-title {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    flex: 1;
  }

  .expand-icon {
    font-size: 1.5rem;
    font-weight: bold;
    transition: transform 0.3s ease;
    margin-left: 1rem;
  }

  .finding-content {
    padding: 1.5rem;
    display: none;
    line-height: 1.7;
  }

  .finding-content p {
    margin: 0;
    font-size: 1.1rem;
  }

  .finding-content.active {
    display: block;
    animation: fadeIn 0.5s ease;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Add highlighting for key terms */
  .finding-content strong {
    color: #4a3f9f;
    background-color: rgba(74, 63, 159, 0.1);
    padding: 0.1rem 0.3rem;
    border-radius: 3px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Set up event listeners for all finding cards
    for (let i = 1; i <= 6; i++) {
      const findingCard = document.getElementById(`finding-card-${i}`);
      const findingContent = document.getElementById(`finding-content-${i}`);
      
      if (findingCard && findingContent) {
        const expandIcon = findingCard.querySelector('.expand-icon') as HTMLElement | null;
        
        // Initialize all cards as expanded
        findingContent.classList.add('active');
        if (expandIcon) {
          expandIcon.textContent = '-';
        }
        
        findingCard.addEventListener('click', (e: Event) => {
          const target = e.target as HTMLElement;
          if (target.closest && target.closest('.finding-content')) return;
          
          findingContent.classList.toggle('active');
          if (expandIcon) {
            if (findingContent.classList.contains('active')) {
              expandIcon.textContent = '-';
            } else {
              expandIcon.textContent = '+';
            }
          }
        });
      }
    }
  });
</script> 
